# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

# Will implement CD when AWS environment is set up


on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  build:
    runs-on: ubuntu-latest

    environment: production
    env:
      PROFILE_ACTIVE: ${{ vars.PROFILE_ACTIVE }}
      LOG_LEVEL: ${{ vars.LOG_LEVEL }}
      JPA_DDL_CONFIG: ${{ vars.JPA_DDL_CONFIG }}
      DB_MYSQL_URL: ${{ vars.DB_MYSQL_URL }}
      DB_MYSQL_USERNAME: ${{ secrets.DB_MYSQL_USERNAME }}
      DB_MYSQL_PASSWORD: ${{ secrets.DB_MYSQL_PASSWORD }}
      AWS_REGION: ${{ vars.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Build with Maven
      run: mvn -B package --file pom.xml -P dev

    - name: Run tests
      run: mvn test -P dev

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: production
    env:
      AWS_REGION: ${{ vars.AWS_REGION }}
      ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
      ECS_SERVICE: ${{ vars.ECS_SERVICE }}
      ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
      ECS_TASK_DEFINITION: ${{ vars.ECS_TASK_DEFINITION }}
      CONTAINER_NAME: ${{ vars.CONTAINER_NAME }}
      PROFILE_ACTIVE: ${{ vars.PROFILE_ACTIVE }}
      LOG_LEVEL: ${{ vars.LOG_LEVEL }}
      JPA_DDL_CONFIG: ${{ vars.JPA_DDL_CONFIG }}
      DB_MYSQL_URL: ${{ vars.DB_MYSQL_URL }}
      DB_MYSQL_USERNAME: ${{ secrets.DB_MYSQL_USERNAME }}
      DB_MYSQL_PASSWORD: ${{ secrets.DB_MYSQL_PASSWORD }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - name: Use variables
        run: |
          echo "aws region : ${{ env.AWS_REGION }}"
          echo "ecs repository : ${{ env.ECR_REPOSITORY }}"
          echo "ecs service : ${{ env.ECS_SERVICE }}"
          echo "ecs cluster : ${{ env.ECS_CLUSTER }}"
          echo "ecs task definition : ${{ env.ECS_TASK_DEFINITION }}"
          echo "Log Level: ${{ env.LOG_LEVEL }}"

      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: LATEST
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --build-arg LOG_LEVEL=${{ env.LOG_LEVEL }} .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: card-ms.json
          container-name: card-ms-container
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: service-card-ms
          cluster: ITSA-ecs-cluster
          wait-for-service-stability: true